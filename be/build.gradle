import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        mavenCentral()
    }
}
plugins {
    id 'org.springframework.boot' version '3.4.4' apply false
    id 'org.barfuin.gradle.jacocolog' version '3.1.0'
    id "org.sonarqube" version "6.1.0.5360"
}

project.ext.group = 'org.theoriok'
project.ext.version = '1.0-SNAPSHOT'
project.ext.name = 'inventory'

ext {
    jacocoVersion = '0.8.13'
    flywayVersion = '11.7.2'
    annotationsVersion = '26.0.2'
    checkstyleVersion = "10.23.0"
    pmdVersion = '7.12.0'
    recordBuilderVersion = '44'
    problemVersion = '0.29.1'
}

allprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'

    group = rootProject.ext.group
    version = rootProject.ext.version

    repositories {
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_24
        targetCompatibility = JavaVersion.VERSION_24
    }

    compileJava {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
    }

    tasks.matching { task -> (task.name == 'jacocoAggregatedReport') }.forEach { task ->
        task.reports {
            xml.required = true
            xml.outputLocation = file("build/reports/jacocoAggregatedReport.xml")
        }
    }

    pluginManager.withPlugin('java-library') {
        apply plugin: 'jacoco'

        dependencies {
            implementation 'org.apache.commons:commons-lang3'
            implementation 'org.slf4j:slf4j-api'

            testImplementation 'org.springframework.boot:spring-boot-starter-test'
            testImplementation 'org.springframework.boot:spring-boot-starter-log4j2'
        }

        javadoc {
            javadoc.options.addStringOption('Xdoclint:none', '-quiet')
        }

        java {
            withJavadocJar()
            withSourcesJar()
        }

        pmd {
            ruleSets = []
            ignoreFailures = false
            toolVersion = pmdVersion
        }

        pmdMain {
            ruleSetFiles = files("${project.rootDir}/config/pmd/pmd.xml")
        }

        pmdTest {
            ruleSetFiles = files("${project.rootDir}/config/pmd/testPmd.xml")
        }

        checkstyle {
            toolVersion = checkstyleVersion
            ignoreFailures = false
            maxErrors = 0
            maxWarnings = 0
            configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        }

        jacoco {
            toolVersion = jacocoVersion
        }

        jacocoTestReport {
            reports {
                xml.required = true
                xml.outputLocation = file("build/reports/jacocoTestReport.xml")
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }

        dependencies {
            dependency "org.flywaydb:flyway-core:$flywayVersion"
            dependency "org.jetbrains:annotations:$annotationsVersion"
            dependency "org.zalando:problem-spring-web-starter:$problemVersion"
        }
    }

    configurations.configureEach {
        exclude group: "ch.qos.logback"

        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
            cacheDynamicVersionsFor 0, 'minutes'

            dependencySubstitution.all { dependency ->
                if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.module == 'spring-boot-starter-logging') {
                    dependency.useTarget("org.springframework.boot:spring-boot-starter-log4j2:$dependency.requested.version", 'Use Log4j2 instead of Logback')
                }
            }
        }
    }
}
project(":main") {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'java-library'

    dependencies {
        implementation project(":application-api")
        implementation project(":application-usecases")
        implementation project(":domain")
        implementation project(":infrastructure-inbound-rest")
        implementation project(":infrastructure-outbound-postgres")
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation 'org.flywaydb:flyway-core'
        implementation "org.flywaydb:flyway-database-postgresql"

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        testImplementation "com.h2database:h2"
        testImplementation 'org.jetbrains:annotations'
    }

    springBoot {
        buildInfo {
            properties {
                name = rootProject.ext.name
            }
        }
    }
}

project(":application-api") {
    apply plugin: 'java-library'
    dependencies {
        implementation project(":vocabulary")
    }
}

project(":domain") {
    apply plugin: 'java-library'

    dependencies {
        annotationProcessor "io.soabase.record-builder:record-builder-processor:$recordBuilderVersion"
        compileOnly "io.soabase.record-builder:record-builder-core:$recordBuilderVersion"

        implementation project(":vocabulary")
    }
}

project(":application-usecases") {
    apply plugin: 'java-library'

    dependencies {
        implementation project(":application-api")
        implementation project(":domain")
        implementation project(":vocabulary")
        implementation 'org.springframework.boot:spring-boot-starter'

        implementation 'org.springframework:spring-context'
    }
}

project(":infrastructure-inbound-rest") {
    apply plugin: 'java-library'

    dependencies {
        implementation project(":application-api")
        implementation project(":vocabulary")
        implementation 'org.apache.logging.log4j:log4j-web'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'io.micrometer:micrometer-registry-prometheus'
        implementation "org.zalando:problem-spring-web-starter"
    }
}

project(":infrastructure-outbound-postgres") {
    apply plugin: 'java-library'

    dependencies {
        implementation project(":domain")
        implementation project(":vocabulary")
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'com.fasterxml.jackson.core:jackson-databind'
        runtimeOnly "org.postgresql:postgresql"
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "theoriok_inventory"
        property "sonar.organization", "theorioksoft"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.rootDir}/build/reports/jacocoAggregatedReport.xml"
        property "sonar.tests", "src/test"
        property "sonar.coverage.exclusions", "**/config/**,**/exception/**,**/persistence/entities/**"
    }
}